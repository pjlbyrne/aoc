#!/bin/python

src = 'd0'
#rc = 'dat'

with open( src ) as f:
  for r, s in enumerate( f ):
    s = s.strip()

sz = sum([ int( c ) for c in s ])
sl, sh = 0, len( s ) - 1

bl = bl0 = int( s[ sl ])
bh = bh0 = int( s[ sh ])

# Part 1: fit files block by block.
j = 0
t1 = 0
while sl <= sh:

  # Last block: only do what hasn't been gap-filled.
  if sl == sh:
    bl -= ( bh0 - bh )

  # Do all of a low block.
  while bl > 0:
    #rint( 'lo {} * {}'.format( j, sl // 2 ))
    t1 += j * ( sl // 2 )
    j += 1
    bl -= 1

  # Last block we are done.
  if sl == sh:
    sl += 1
    continue

  # Get the gap.
  sl += 1
  bl = int( s[ sl ])

  # Do as many high blocks as will fit into the next gap.
  while bl > 0:
    #rint( 'hi {} * {}'.format( j, sh // 2 ), bh )
    t1 += j * ( sh // 2 )
    j += 1
    bl -= 1
    bh -= 1
    if bh == 0:
      sh -= 2
      bh = bh0 = int( s[ sh ])
    
  # Get the next block.
  sl += 1
  bl = bl0 = int( s[ sl ])

  #rint( sl, sh )
print( 'part', t1 )

gaps = {}
si = 0
while len( gaps ) < 10 and si < len( s ):
  b = s[ si ]             # size of block
  j += b                  # skip block on disk
  si += 1                 # next is gap
  b = s[ si ]             # size of gap
  if b not in gaps:       # first gap of this size
    gaps[ b ] = ( si, j ) # input pos and disk pos
  j += b                  # skip gap on disk
print( 'gaps', gaps )

# Part 2: fit whole files.
sl, sh = 0, len( s ) - 1
bl = bl0 = int( s[ sl ])
bh = bh0 = int( s[ sh ])
t2 = 0
while sl <= sh:

  # Get the smallest gap to fit the endmost block.
  for _b in range( bh, 10 ):
    if _b in gaps:
      j0 = b[ gaps ]
      for j in 
      t2 += 
  # Get
  # Do all of a low block.
  while bl > 0:
    #rint( 'lo {} * {}'.format( j, sl // 2 ))
    t1 += j * ( sl // 2 )
    j += 1
    bl -= 1

  # Skip over the gap to the next block
  sl += 2
  bl = int( s[ sl ])
