#!/bin/python

# Input map from command.
import sys
src = sys.argv[ 1 ]

# Read the map.
m = []
with open( src ) as f:
  for r, s in enumerate( f ):
    s = s.strip()
    if '^' in s:
      s0, r0, c0 = '^', r, s.find( '^' )
    l = [ x for x in s ]
    m.append( l )

# Map bounds.
H, W = len( m ), len( m[ 0 ])
h, w = H-1, W-1
 
# Turn until we can move forward.
def move( step ):
  s, r, c = step
  while True:
    if s == '^':
      if r == 0 or m[r-1][c] != '#': return ( s, r-1, c )
      s = '>'
    elif s == '>':
      if c == w or m[r][c+1] != '#': return ( s, r, c+1 )
      s = 'v'
    elif s == 'v':
      if r == h or m[r+1][c] != '#': return ( s, r+1, c )
      s = '<'
    else: # s == '<':
      if c == 0 or m[r][c-1] != '#': return ( s, r, c-1 )
      s = '^'
 
# Return true if out of bounds.
def off_map( st ):
  _, r, c = st
  return r < 0 or r > h or c < 0 or c > w
 
# Patrol until off-map or looping.
def patrol( st ):
  sts = set()
  while True:
    _st = move( st )                # work out next location
    if off_map( _st ): return True  # off-map: done
    if _st in sts: return False     # looping: done
    sts.add( _st )                  # record step
    st = _st                        # next step
 
# Visited positions for part 1.
n = [[ '.' for c in range( W ) ] for r in range( H )]

# Obstacles that cause loops for part 2.
o = [[ '.' for c in range( W ) ] for r in range( H )]

# Run until off-map.
st0 = ( s0, r0, c0 )
_st = st0
while True:
  st = move( _st )                  # next step
  if off_map( st ): break           # off map: done
  s, r, c = st                      # next orientaion & position
  f = m[r][c]                       # whats there
  if f != '#' and (r,c) != (r0,c0): # no obstacle ahead and not start pos
      m[r][c] = '#'                 #   place obstacle
      if not patrol( st0 ):         #   does it cause a loop?
        o[r][c] = 'O'               #     record the obstacle
      m[r][c] = f                   #   remove obstacle
  _st = st                          # take step
  n[r][c] = '#'                     # record visited location for part 1
 
  # Put trail on map.
#m[r][c] = '+'   if s in [ '<', '>' ] and f == '|' \
#     else '+'   if s in [ '^', 'v' ] and f == '-' \
#     else '-'   if s in [ '<', '>' ] \
#     else '|' # if s in [ '^', 'v' ]
 
if False:
  for l1, l2 in zip( m, o ):
    for c1, c2 in zip( l1, l2 ): print( c2 if c2 == 'O' else c1, end = '' )
    print()
 
# 4903 correct
print( 'part1', sum( sum( 1 for f in l if f == '#' ) for l in n ))
 
# 696 too low
# 2140 not right
# 1997 not right
print( 'part2', sum( sum( 1 for f in l if f == 'O' ) for l in o ))
