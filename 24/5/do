#!/bin/python

src = 'd0'
src = 'dat'

precedes, succeeds, updates = {}, {}, []
with open( src ) as f:
  for l in f:
    if '|' in l:
      p0, p1 = l.split( '|' )
      p0, p1 = int( p0 ), int( p1 )
      precedes.setdefault( p1, [] ).append( p0 )
      succeeds.setdefault( p0, [] ).append( p1 )
    if ',' in l:
      l = [ int( s ) for s in l.split( ',' )]
      updates.append( l )

def ins( p1, u ):
  i = 0
  for j, p0 in enumerate( u ):
    if p0 in succeeds and p1 in succeeds[ p0 ]:
      i = j + 1
  u.insert( i, p1 )

t1, t2 = 0, 0
for u in updates:
  ok = True

  # For each page in this manual:
  for i, p1 in enumerate( u ):

    # If any preceeding page should succeed
    # this one then the manual is invalid.
    if p1 in succeeds:
      ss = succeeds[ p1 ]
      if any( p0 in ss for p0 in u[:i] ):
        ok = False

    # If any succeeding page should precede
    # this one then the manual is invalid.
    if p1 in precedes:
      ps = precedes[ p1 ]
      if any( p2 in ps for p2 in u[i+1:] ):
        ok = False

  # Middle page number.
  i = ( len( u ) - 1 ) // 2

  # For correctly-ordered updates, add the
  # middle page number to part 1 total.
  if ok: t1 += u[ i ]

  # Reorder the incorrectly-ordered updates,
  # add middle page to part2 total.
  else:
    _u = []
    for p1 in u: ins( p1, _u )
    t2 += _u[ i ]

print( 'part1', t1 )
print( 'part2', t2 )
