#!/bin/python

import sys
src = sys.argv[ 1 ]
machines = []
with open( src ) as f:
  for l in f:
    l = l.strip().split()
    if not l: continue
    if l[ 0 ] == 'Button':
      if l[ 1 ] == 'A:':
        ax, ay = int( l[2][2:-1]), int( l[3][2:])
      else:
        bx, by = int( l[2][2:-1]), int( l[3][2:])
    if l[ 0 ] == 'Prize:':
      px, py = int( l[1][2:-1]), int( l[2][2:])
      machines.append(( ax, ay, bx, by, px, py ))

def check( m ):
  ax, ay, bx, by, px, py = m

  # It would be cheapest to reach the prize with only pushes of button B,
  # so start with the closest number of B steps, and decrease B steps while
  # increasing A until we get a match in both X and Y.
  na, nb = 0, px // bx

  while nb > 0:

    x = na * ax + nb * bx
    y = na * ay + nb * by
    if abs( x - px ) == 0 and abs( y - py ) == 0:
      return na, nb

    # Try increasing na at current nb to get a match.
    if x < px:
      _na = na + 1
      while x < px:
        x, y = _na * ax + nb * bx, _na * ay + nb * by
        if abs( x - px ) == 0 and abs( y - py ) == 0:
          return _na, nb
        _na = _na + 1

    # Try decreasing na at current nb to get a match.
    else:
      _na = na + 1
      while x < px:
        x, y = _na * ax + nb * bx, _na * ay + nb * by
        if abs( x - px ) == 0 and abs( y - py ) == 0:
          return _na, nb
        _na = _na - 1

    # No values of na with current nb match.
    nb -= 1
 
  # oops no solution
  return None, None

t1 = 0
for m in machines:
  na, nb = check( m )
  if na is None:
    continue
  t1 = t1 + 3 * na + nb

print( 'part1', t1 )

# For part 2 the simple search is too slow. We need Cramer's rule.
#
# a1 * x + b1 * y = c1
# a2 * x + b2 * y = c2
#
#     |c1 b1|
#     !c2 b2|   c1 * b2 - b1 * c2
# x = ------- = -----------------
#     |a1 b1|   a1 * b2 - b1 * a2
#     |a2 b2|
#
#     |a1 c1|
#     !a2 c2|   a1 * c2 - c1 * a2
# y = ------- = -----------------
#     |a1 b1|   a1 * b2 - b1 * a2
#     |a2 b2|
#
t2 = 0
N = 10000000000000
for ax, ay, bx, by, px, py in machines:
  px, py = N + px, N + py
 
  # Here the two linear equations are:
  #
  #   ax * na + bx * nb = px
  #   ay * na + by * nb = py
  #
  # Substituting in Cramer's rule:
  #
  #   na = ( px * by - bx * py ) // ( ax * by - bx * ay )
  #   nb = ( px * by - bx * py ) // ( ax * by - bx * ay )

  d = ( ax * by - bx * ay )
  if d == 0: continue # no solution
  na = ( px * by - bx * py ) // d
  nb = ( ax * py - px * ay ) // d
  _px = ax * na + bx * nb
  _py = ay * na + by * nb
  if _px != px or _py != py: continue
  t2 = t2 + 3 * na + nb


print( 'part2', t2 )
