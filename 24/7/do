#!/bin/python

src = 'd0'
#rc = 'dat'

m = []
with open( src ) as f:
  for r, s in enumerate( f ):
    s = s.strip()
    if '^' in s:
      r0, c0 = r, s.find( '^' )
    l = [ x for x in s ]
    m.append( l )

#rint( r0, c0, m[ r0 ][ c0 ])

h, w = len( m ), len( m[ 0 ])
t1, t2 = 0, 0
on_map = True

# This will record visited positions for part 1.
n = [ [ '.' for c in range( w ) ] for r in range( h )]

# This will record obsctacle positions.
o = [ [ '.' for c in range( w ) ] for r in range( h )]

# Sentry orientation.
s = m[ r0 ][ c0 ]

# Move the sentry until she strays off the map.
r, c = r0, c0
while on_map:
  fwd = False
  _r, _c = r, c
  s0 = s
  while on_map and not fwd:
    if s == '^':
      if r == 0               : on_map = False; continue
      if m[ r-1 ][ c ] == '#' : s = '>'       ; continue
      _r, fwd = r-1, True
    elif s == '>':
      if c == w - 1           : on_map = False; continue
      if m[ r ][ c+1 ] == '#' : s = 'v'       ; continue
      _c, fwd = c+1, True
    elif s == 'v':
      if r == h - 1           : on_map = False; continue
      if m[ r+1 ][ c ] == '#' : s = '<'       ; continue
      _r, fwd = r+1, True
    else: # s == '<':
      if c == 0               : on_map = False; continue
      if m[ r ][ c-1 ] == '#' : s = '^'       ; continue
      _c, fwd = c-1, True

  # Count unvisited positions for part 1.
  if n[ r ][ c ] == '.':
    t1 += 1
    n[ r ][ c ] = '#'

  # We are done.
  if not on_map: break

  # Record the trail.
  f = m[ r ][ c ]
 #print( 'f', f )

  # Going left/right now.
  if s == '<' or s == '>':

    # We were going up/down so we turned.
    if s0 != '<' and s0 != '>':
      f = '+'

    # Crossing old trail.
    elif f == '|':
      f = '+'

      # Going left can we place obstacle?
      if s == '<':
        if _c > 0 and m[ _r ][ _c-1 ] == '.':

          # We can place an obstacle on the left so sentry will
          # turn right but will she loop?
          __r = r
          while __r >= 0:
            print( '__r', __r, 'c', c, m[ __r ][ c ])
            if m[ __r ][ c ] == '#':
              o[ r ][ c-1 ] = 'O'
              t2 += 1
              break
            __r -= 1

      # Going right can we place obstacle?
      else:
        if _c < w-1 and m[ r ][ _c+1 ] == '.':

          # We can place an obstacle on the right so sentry will
          # turn right but will she loop?
          __r = r
          while __r < h:
            print( '__r', __r, 'c', c, m[ __r ][ c ])
            if m[ __r ][ c ] == '#':
              o[ r ][ c+1 ] = 'O'
              t2 += 1
              break
            __r += 1

    # New trail.
    else:
      f = '-'

  # Going up/down now.
  else: # s == '^' or s == 'v':

    # Were going left/right so we turned.
    if s0 != '^' and s0 != 'v':
      f = '+'

    # Crossing old trail.
    elif f == '-':
      f = '+'

      # Going up can we place obstacle?
      if s == '^':
        if _r > 0 and m[ _r-1 ][ c ] == '.':

          # We can place an obstacle above so sentry will
          # turn right but will she loop?
          __c = c
          while __c < w - 1:
            print( 'r', r, '__c', __c, m[ r ][ __c ])
            if m[ r ][ __c ] == '#':
              o[ r-1 ][ c ] = 'O'
              t2 += 1
              break
            __c += 1

      # Going down can we place obstacle?
      else:
        if _r < h-1 and m[ _r+1 ][ c ] == '.':

          # We can place an obstacle below so sentry will
          # turn right but will she loop?
          __c = c
          while __c >= 0:
            print( 'r', r, '__c', __c, m[ r ][ __c ])
            if m[ r ][ __c ] == '#':
              o[ r+1 ][ c ] = 'O'
              t2 += 1
            __c -= 1

    # New trail.
    else:
      f = '|'

  # Put the trail on the map.
  m[ r ][ c ] = f

  # Move the sentry.
  r, c = _r, _c

  if True:
    print( r, c, t2 )
    for l in m:
      print( ''.join( l ))
    input()

for l in n:
  print( ''.join( l ))
print( 'part1', t1 )
print( 'part2', t2 )
