#!/bin/python3

src = 'd0'
src = 'dat'

dt = {
  1 : '5 of a kind'
, 2 : '4 of a kind'
, 3 : 'full house'
, 4 : '3 of a kind'
, 5 : 'two pair'
, 6 : 'one pair'
, 7 : 'high card'
}
t1 = 0
hands = []

def hand_type( h ):
  d = {}
  for c in hand:
    if c not in d: d[c] = 1
    else: d[c] +=1
  l = [ v for v in d.values() ]
  if len(d) == 1:
    t = 1                                      # 5 of a kind
  elif len(d) == 2:
    t = 2 if l[0] == 1 or l[0] == 4 else 3     # 4 of a kind / full house
  elif len(d) == 3:
    if l[0] == 3 or l[1] == 3 or l[2] == 3:
      t = 4                                    # 3 of a kind
    else:
      t = 5                                    # two pair
  elif len(d) == 4:
    t = 6                                      # one pair
  else:
    t = 7                                      # high card
  return t

cts = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 }
us = { 1: 1, 2: 1, 3: 1, 4: 2, 5: None, 6: None, 7: 6 }
with open( src ) as f:
  for l in f:
    hand, bid = l.strip().split()
    bid = int( bid )
    t = hand_type( hand )
    nj = hand.count( 'J' )
    if t == 1:
      u = 1
    elif t == 2:
      if nj > 0:
        u = 1
      else:
        u = 2
    elif t == 3:
      if nj > 0:
        u = 1
      else:
        u = 3
    elif t == 4:
      if nj > 0:
        u = 2
      else:
        u = 4
    elif t == 5:
      if nj == 2:
        u = 2
      elif nj == 1:
        u = 3
      else:
        u = 5
    elif t == 6:
      if nj == 2:
        u = 4
      elif nj == 1:
        u = 4
      else:
        u = 6
    else: # t == 7
      if nj == 1:
        u = 6
      else:
        u = 7
    #print( dt, t )
    #print( hand, bid, dt[t] )
    hands.append(( hand, bid, t, u ))
    ct = hand.count('J')
    cts[ ct ] += 1

stren = { c: i for i, c in enumerate( '23456789TJQKA' ) }
def cmp( h0, t0, h1, t1 ):
    if t0 > t1: return -1
    if t0 < t1: return +1
    for c0, c1 in zip( h0, h1 ):
        #print( h0, h1, c0, c1 ); input()
        s0, s1 = stren[ c0 ], stren[ c1 ]
        if s0 < s1: return -1
        if s0 > s1: return +1
    return 0

swap = True
while swap:
  swap = False
  for i in range( len( hands ) - 1 ):
    h0, b0, t0, u0 = hands[ i ]
    h1, b1, t1, u1 = hands[ i + 1 ]
    c = cmp( h0, t0, h1, t1 )
    #print( 'cmp', h0, t0, h1, t1, c )
    if c > 0:
        hands[ i ] = ( h1, b1, t1, u1 )
        hands[ i + 1 ] = ( h0, b0, t0, u0 )
        swap = True
  #print( hands )

t1 = 0
i = 1
for h, b, t, u in hands:
  t1 += b * i
  #print( b, i )
  i += 1

print( 'part1', t1 )

stren2 = { c: i for i, c in enumerate( 'J23456789TQKA' ) }
def cmp2( h0, u0, h1, u1 ):
    if u0 > u1: return -1
    if u0 < u1: return +1
    for c0, c1 in zip( h0, h1 ):
        #print( h0, h1, c0, c1 ); input()
        s0, s1 = stren2[ c0 ], stren2[ c1 ]
        if s0 < s1: return -1
        if s0 > s1: return +1
    return 0

swap = True
while swap:
  swap = False
  for i in range( len( hands ) - 1 ):
    h0, b0, t0, u0 = hands[ i ]
    h1, b1, t1, u1 = hands[ i + 1 ]
    c = cmp2( h0, u0, h1, u1 )
    #print( 'cmp', h0, t0, h1, t1, c )
    if c > 0:
        hands[ i ] = ( h1, b1, t1, u1 )
        hands[ i + 1 ] = ( h0, b0, t0, u0 )
        swap = True
  #print( hands )

t2 = 0
i = 1
for h, b, t, u in hands:
  t2 += b * i
  #print( b, i )
  i += 1

print( 'part2', t2 )
# 242614808 too low
# 242634035 too low
# 240629557
# 243957307
# 243955913
# 244996870
# 243101568
