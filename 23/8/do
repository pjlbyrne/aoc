#!/bin/python3

from itertools import cycle
from math import lcm

src = 'd2'
src = 'dat'

nodes = {}
lnodes = []
with open( src ) as f:
  steps = cycle( f.readline().strip() )
  f.readline()

  it = iter( f )
  for l in it:
    l = l.strip()
    n, nlr = l.split( '=' )
    n, nlr = n.strip(), nlr.strip()
    nlr = nlr[ 1: -1 ]
    nl, nr = nlr.split( ',' )
    nr = nr[ 1: ]
    nodes[ n ] = nl, nr
    lnodes.append(( n, nl, nr ))
    #print( '{} = ({}, {})'.format( n, nl, n ))

curs = [( n, n, 0, False ) for n, _, _ in lnodes if n.endswith( 'A' )]

for s in steps:
  _curs = []
  todo = False
  for n0, n, ct, done in curs:
    if not done:
      ct += 1
      nl, nr = nodes[ n ]
      n = nl if s == 'L' else nr
      if n.endswith( 'Z' ):
        done = True
      else:
        todo = True
    _curs.append(( n0, n, ct, done ))
  curs = _curs
  if not todo:
    break

for n0, n, ct, _ in curs:
  if n0 == 'AAA': print( 'part1', ct )

print( 'part2', lcm(*[ ct for _, _, ct, _ in curs ]))

