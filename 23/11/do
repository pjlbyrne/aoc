#!/bin/python3

import itertools

src = 'd0'
src = 'dat'

# read the map
with open( src ) as f:
  m = [ l.strip() for l in f.readlines() ]
m0 = m

# count distances over the rows
dr1, dr2 = [], [] # blank row is 2 / 1000000
for row in m:
  if '#' not in row:
    d1, d2 = 2, 1000000
  else:
    d1, d2 = 1, 1
  dr1.append( d1 )
  dr2.append( d2 )
h = len( m )

# transpose the map
mt = []
for c in range( len( m[ 0 ])):
  mt.append( ''.join( m[ r ][ c ] for r in range( h )))

# count distances over the columns
dc1, dc2 = [], [] # blank col is 2 / 1000000
for col in mt:
  if '#' not in col:
    d1, d2 = 2, 1000000
  else:
    d1, d2 = 1, 1
  dc1.append( d1 )
  dc2.append( d2 )
w = len( mt )

# find all galaxies
gs = []
for r in range( h ):
  for c in range( w ):
    if m[ r ][ c ] == '#':
      gs.append(( r, c ))

# measure all distances
t1, t2 = 0, 0
for g0, g1 in itertools.combinations( gs, 2 ):
  r0, c0 = g0
  r1, c1 = g1
  probe = False #r0 == 5 and c0 == 1 and r1 == 0 and c1 == 4
  _t1 = t1
  if r1 != r0:
    for r in range( r0, r1, ( r1 - r0 ) // abs( r1 - r0 )):
      t1 += dr1[ r ]
      t2 += dr2[ r ]
      if probe: print( 'r', dr1[ r ])
  if c1 != c0:
    for c in range( c0, c1, ( c1 - c0 ) // abs( c1 - c0 )):
      t1 += dc1[ c ]
      t2 += dc2[ c ]
      if probe: print( 'c', dc1[ c ])
  if probe: print( r0, c0, r1, c1, t1 - _t1 )
print( 'part1', t1 )
print( 'part2', t2 )

