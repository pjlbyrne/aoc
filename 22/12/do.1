#!/bin/python

import numpy as np
import sys

sys.setrecursionlimit( 100000 )

dpath = sys.argv[ 1 ]

lines = []
with open( dpath ) as f:
  for l in f:
    l = l.strip()
    lines.append( l.strip() )

W = len( lines[ 0 ])
H = len( lines )
M = np.zeros(( H, W ), np.int8 )
S = np.full(( H, W ), 9999 )
P = np.zeros(( H, W ), np.int8 )
r, c, Sr, Sc, Er, Ec = 0, 0, 0, 0, 0, 0
orda = ord( 'a' )
for r, line in enumerate( lines ):
  for c, ch in enumerate( lines[ r ]):
    if ch == 'S':
      Sr, Sc, h = r, c, 0
    elif ch == 'E':
      Er, Ec, h = r, c, 25
    else:
      h = ord( ch ) - orda
    M[ r ][ c ] = h

def show():

  for r in range( H ):
    l = ''.join( str( P[r][c] ) for c in range( W ))
    print( l )

def walk( r, c ):

  #print( P ); print( S ); input()

  P[ r ][ c ] = 1     # we have visited here
  h = M[ r ][ c ] + 1 # height of neighbour we can reach
  s = S[ r ][ c ] + 1 # distance to a neighbour we can reach
  nsew = [            # coords of neighbours
    ( r - 1, c )
  , ( r + 1, c )
  , ( r, c + 1 )
  , ( r, c - 1 )
  ]

  # update shortest paths to neighbours
  for y, x in nsew:
    if y < 0 or y == H or x < 0 or x == W: continue
    if M[ y ][ x ] <= h and s < S[ y ][ x ]:
      S[ y ][ x ] = s

  # visit neighbours if we can reach them from here
  for y, x in nsew:
    if y < 0 or y == H or x < 0 or x == W: continue
    if M[ y ][ x ] <= h and P[ y ][ x ] == 0:
      walk( y, x )

S[ Sr ][ Sc ] = 0
#print( M )
walk( Sr, Sc )
#print( S )
print( 'part1', S[ Er ][ Ec ])

